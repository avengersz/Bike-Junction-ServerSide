const express = require('express')
const app = express()
const cors = require('cors');
require('dotenv').config();
const { MongoClient } = require('mongodb');
// const admin = require("firebase-admin");
const port = process.env.PORT || 5000;




// const serviceAccount = require("./doctors-portal-41193-firebase-adminsdk-pbm2f-d80b3a6067.json");

// admin.initializeApp({
//   credential: admin.credential.cert(serviceAccount)
// });


app.use(cors());
app.use(express.json());

const uri = `mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASS}@cluster0.m9exe.mongodb.net/Final_Project?retryWrites=true&w=majority`;

const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });
async function run() {
    try{
      await client.connect();
      const database = client.db('Final_Project');
      const bikeCollection = database.collection ('bikes');
      const bikeCollection = database.collection ('bike');
      console.log('connected');
    
   
        // Tour Services
        app.get('/tours', async (req, res) => {
          const cursor = bikeCollection.find({});
          const bikes = await cursor.toArray();
          res.send(bikes);
      });
    
      //Get Single Tour Service
      
      
      app.get('/tours/:id', async(req, res)=>{
        const id  = req.params.id;
        const query = {_id:objectId(id)};
        const bike = await bikeCollection.findOne(query);
        res.json(bike);
    });
    
    // Add Tour Services
    
    app.post('/tours', async (req, res) => {
      const bike = req.body;
      const result = await BikeCollection.insertOne(bike);
      console.log(result);
      res.json(result);
    });
    
    //Get my orders
    app.get('/tour', async (req, res) => {
      const cursor = myBikeCollection.find({});
      const bikes = await cursor.toArray();
      res.send(bikes);
    });
    
    //Add my tour orders
    app.post('/bike', async (req, res) => {
      const myBike = req.body;
      const result = await myBikeCollection.insertOne(myBike);
      console.log(result);
      res.json(result);
    });
    //handle my orders
    app.delete('/bike/:id', async(req, res) => {
      const id  = req.params.id;
      const query ={_id:objectId(id)};
      const result = await myBikeCollection.deleteOne(query);
      res.json(result);
    })
    // Delete Tour Services
    
      app.delete('/bikes/:id', async(req, res) => {
        const id  = req.params.id;
        const query ={_id:objectId(id)};
        const result = await bikeCollection.deleteOne(query);
        res.json(result);
    })
    
    
    
    }
    finally{
        //await client.close
    }
    }
    run().catch (console.dir);
    
    
    app.get('/', (req, res) => {
      res.send('Running Bike Server!')
    })
    
    app.listen(port, () => {
      console.log(`Running Bike Server!`)
    })